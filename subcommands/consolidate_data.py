"""Consolidate repository data from several previous steps.

Use -h or --help for more information.
"""
import argparse
import csv
import logging
import sys

from util.parse import \
    parse_repo_to_package_file, \
    consolidate_data


__log__ = logging.getLogger(__name__)

FIELDNAMES = [
    'id',
    'name',
    'full_name',
    'description',
    'size',
    'private',
    'fork',
    'archived',
    'created_at',
    'updated_at',
    'pushed_at',
    'language',
    'default_branch',
    'homepage',
    'forks_count',
    'stargazers_count',
    'subscribers_count',
    'watchers_count',
    'network_count',
    'has_downloads',
    'has_issues',
    'has_pages',
    'has_projects',
    'has_wiki',
    'owner_id',
    'owner_login',
    'owner_type',
    'parent_id',
    'source_id',
    'commit_count',
    'has_gradle_files',
    'renamed_to',
    'not_found',
    'clone_status',
    'clone_project_name',
    'clone_project_id',
    'clone_project_path',
    'packages'
    ]


def define_cmdline_arguments(parser: argparse.ArgumentParser):
    """Add arguments to parser."""
    parser.add_argument(
        'ORIGINAL_REPO_LIST', type=argparse.FileType('r'),
        help='''CSV file as created by subcommand 'get_repo_data' and augmented
            by subcommand 'add_gradle_info'. This original file is necessary
            because later versions have non ASCII characters wrongly encoded.
            ''')
    parser.add_argument(
        'NEW_REPO_LIST', type=argparse.FileType('r'),
        help='''CSV file generated by external script to import GitHub
            repositories to a local Gitlab instance. This file has the same
            content as 'original_file' with some additional columns.
            Unfortunately, there is an encoding issue.''')
    parser.add_argument(
        'MIRRORED_REPO_LIST', type=argparse.FileType('r'),
        help='''CSV file generated by subcommand 'mirror_empty_repos'. This
            file contains updated information on the snapshot repository in
            Gitlab.''')
    parser.add_argument(
        'PACKAGE_LIST', type=argparse.FileType('r'),
        help='''CSV file that lists package name and repository name in
            a column each. The file should not have a header.''')
    parser.add_argument(
        'RENAMED_REPOS_LIST', type=argparse.FileType('r'),
        help='''CSV file which lists GitHub IDs and new repo names of some
            renamed repos.''')
    parser.add_argument(
        '-o', '--output', type=argparse.FileType('w'), default=sys.stdout,
        help='File to write output CSV to. Default: stdout.')
    parser.set_defaults(func=_main)


def _main(args: argparse.Namespace):
    """Pass arguments to respective function."""
    __log__.info('------- Arguments: -------')
    __log__.info('ORIGINAL_REPO_LIST: %s', args.ORIGINAL_REPO_LIST)
    __log__.info('NEW_REPO_LIST: %s', args.NEW_REPO_LIST.name)
    __log__.info('MIRRORED_REPO_LIST: %s', args.MIRRORED_REPO_LIST.name)
    __log__.info('PACKAGE_LIST: %s', args.PACKAGE_LIST.name)
    __log__.info('RENAMED_REPOS_LIST: %s', args.RENAMED_REPOS_LIST.name)
    __log__.info('--output: %s', args.output.name)
    __log__.info('------- Arguments end -------')

    packages_by_repo = parse_repo_to_package_file(args.PACKAGE_LIST)
    renamed_repos = {row['github_id']: row for row in csv.DictReader(
        args.RENAMED_REPOS_LIST)}
    data = consolidate_data(
        args.ORIGINAL_REPO_LIST, args.NEW_REPO_LIST, args.MIRRORED_REPO_LIST,
        renamed_repos, packages_by_repo)
    writer = csv.DictWriter(args.output, FIELDNAMES)
    writer.writeheader()
    num_repos = 0
    for row in data:
        num_repos += 1
        writer.writerow(row)
    __log__.info('Number of successfully matched repos: %d', num_repos)
